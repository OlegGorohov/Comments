{"version":3,"sources":["components/Comment/Comment.tsx","service/testData.ts","service/index.ts","service/CommentsControl.ts","utils/main.ts","components/Authors/Authors.tsx","features/comments/Comments.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Comment","response","activeAuthor","author","message","comments","className","clsx","length","map","comment","index","testData","commentsControl","getCommentsList","a","getAuthorsFromResponse","authorsSet","authors","Set","forEach","add","Array","from","Authors","setActiveAuthor","useState","authorsList","setAuthorsList","getAuthors","useMemo","useEffect","onClick","Comments","commentsList","setCommentsList","then","result","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d6495c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { CommentDTO } from \"dtos/CommentDTO\";\r\nimport \"./Comment.css\";\r\n\r\ninterface Props {\r\n  response: CommentDTO;\r\n  activeAuthor: string;\r\n}\r\n\r\nexport const Comment: React.FC<Props> = ({ response, activeAuthor }) => {\r\n  const { author, message, comments } = response;\r\n\r\n  return (\r\n    <article className='comment'>\r\n      <div\r\n        className={clsx(\"comment__author\", {\r\n          \"comment__author--active\": author === activeAuthor,\r\n        })}\r\n      >\r\n        {author}\r\n      </div>\r\n      <div\r\n        className={clsx(\"comment__text\", {\r\n          \"comment__text--active\": author === activeAuthor,\r\n        })}\r\n      >\r\n        <p>{message}</p>\r\n      </div>\r\n      {comments.length > 0 &&\r\n        comments.map((comment: CommentDTO, index: number) => (\r\n          <Comment\r\n            activeAuthor={activeAuthor}\r\n            response={comment}\r\n            key={`${author}-${index}`}\r\n          />\r\n        ))}\r\n    </article>\r\n  );\r\n};\r\n","import { CommentDTO } from \"dtos/CommentDTO\";\r\n\r\nexport const testData: CommentDTO[] = [\r\n  {\r\n    author: \"Nikolay\",\r\n    message: \"Hi\",\r\n    comments: [\r\n      {\r\n        author: \"Olga\",\r\n        message: \"Hi there\",\r\n        comments: [],\r\n      },\r\n      {\r\n        author: \"Nikolay\",\r\n        message: \"What's up?!\",\r\n        comments: [\r\n          {\r\n            author: \"Olga\",\r\n            message: \"How are u?\",\r\n            comments: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    author: \"Alex\",\r\n    message: \"Hey folks!\",\r\n    comments: [],\r\n  },\r\n];\r\n","import { CommentsControl } from \"./CommentsControl\";\r\n\r\nexport const commentsControl = new CommentsControl();\r\n","import { testData } from \"./testData\";\r\n\r\nexport class CommentsControl {\r\n  public getCommentsList = async () => {\r\n    return testData;\r\n  };\r\n}\r\n","import { CommentDTO } from \"dtos/CommentDTO\";\r\n\r\nexport const getAuthorsFromResponse = (\r\n  response: CommentDTO[],\r\n  authorsSet?: Set<string>\r\n): string[] => {\r\n  const authors = authorsSet ?? new Set();\r\n  response.forEach((comment) => {\r\n    if (comment.author) {\r\n      authors.add(comment.author);\r\n    }\r\n    if (comment.comments.length > 0) {\r\n      getAuthorsFromResponse(comment.comments, authors);\r\n    }\r\n  });\r\n\r\n  return Array.from(authors);\r\n};\r\n","import React, {\r\n  Dispatch,\r\n  SetStateAction,\r\n  useEffect,\r\n  useMemo,\r\n  useState,\r\n} from \"react\";\r\nimport { CommentDTO } from \"dtos/CommentDTO\";\r\nimport { getAuthorsFromResponse } from \"utils/main\";\r\nimport \"./Authors.css\";\r\nimport clsx from \"clsx\";\r\n\r\ninterface Props {\r\n  response: CommentDTO[];\r\n  activeAuthor: string;\r\n  setActiveAuthor: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const Authors: React.FC<Props> = ({\r\n  response,\r\n  activeAuthor,\r\n  setActiveAuthor,\r\n}) => {\r\n  const [authorsList, setAuthorsList] = useState<string[] | null>(null);\r\n\r\n  const getAuthors = useMemo(() => getAuthorsFromResponse(response), [\r\n    response,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setAuthorsList(getAuthors);\r\n  }, [getAuthors]);\r\n\r\n  return (\r\n    <ul className='authors'>\r\n      {authorsList &&\r\n        authorsList.length > 0 &&\r\n        authorsList?.map((author) => {\r\n          return (\r\n            <li\r\n              className={clsx(\"author\", \"authors__author\", {\r\n                \"author--active\": author === activeAuthor,\r\n              })}\r\n              onClick={() => setActiveAuthor(author)}\r\n              key={author}\r\n            >\r\n              {author}\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Comment } from \"components/Comment/Comment\";\r\nimport { commentsControl } from \"service\";\r\nimport { CommentDTO } from \"dtos/CommentDTO\";\r\nimport { Authors } from \"components/Authors/Authors\";\r\nimport \"./Comments.css\";\r\n\r\nexport const Comments: React.FC = () => {\r\n  const [commentsList, setCommentsList] = useState<CommentDTO[] | null>(null);\r\n  const [activeAuthor, setActiveAuthor] = useState<string>(\"\");\r\n\r\n  useEffect(() => {\r\n    commentsControl.getCommentsList().then((result) => {\r\n      setCommentsList(result);\r\n    });\r\n  }, []);\r\n\r\n  if (commentsList && commentsList.length > 0) {\r\n    return (\r\n      <div className='comments'>\r\n        <section>\r\n          <h1 className='comments__title'>Authors</h1>\r\n          <div className='comments__authors'>\r\n            <Authors\r\n              response={commentsList}\r\n              activeAuthor={activeAuthor}\r\n              setActiveAuthor={setActiveAuthor}\r\n            />\r\n          </div>\r\n        </section>\r\n        <section>\r\n          <h1 className='comments__title'>Comments</h1>\r\n          <div className='comments__list'>\r\n            {commentsList.map((comment: CommentDTO, index: number) => {\r\n              const { author } = comment;\r\n\r\n              return (\r\n                <Comment\r\n                  response={comment}\r\n                  activeAuthor={activeAuthor}\r\n                  key={`${author}-${index}`}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n","import React from \"react\";\nimport { Comments } from \"features/comments/Comments\";\n\nfunction App() {\n  return (\n    <main>\n      <Comments />\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}